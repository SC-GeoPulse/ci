name: Continuous Integration
on:
    workflow_dispatch:
    repository_dispatch:
      types: [backend, dashboard]
    push:
      paths:
        - '.github/workflows/ci.yml'
        - '*.sh'
      branches:
        - master

permissions:
  contents: write

concurrency:
  group: ${{ github.ref }}-${{ github.event.client_payload.ref || 'refs/heads/master'}}
  cancel-in-progress: true

jobs:
    ci:
        name: Continuous Integration
        if: ${{ !github.event.client_payload.ref || github.event.client_payload.ref == 'refs/heads/master' }}
        runs-on: ubuntu-latest
        env:
            REPO_BACKEND: backend
            REPO_DASHBOARD: dashboard
            REPO_CI: ci
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Deploy Keys
              env:
                GP_API: ${{ secrets.GP_API }}
                GP_BACKEND: ${{ secrets.GP_BACKEND }}
                GP_DASHBOARD: ${{ secrets.GP_DASHBOARD }}
                GP_CI: ${{ secrets.GP_CI }}
              run: |
                ./keys.sh --all

            - name: Build and Test Backend
              run: |
                git clone \
                  git@backend.geopulse:${{ github.repository_owner }}/${{ env.REPO_BACKEND }}.git \
                  ${{ github.workspace }}/backend

                pushd ${{ github.workspace }}/backend

                ${{ github.workspace }}/report.sh \
                  --state "pending" \
                  --description "GitHub Actions workflow requested" \
                  --token ${{ secrets.GP_GITHUB_TOKEN }} \
                  --repo ${{ env.REPO_BACKEND }} \
                  --commit $(git rev-parse HEAD)

                ./build.sh auth
                ./build.sh geo
                ./build.sh mgmt

                ./test.sh

                popd

            - name: Build and Test Dashboard
              run: |
                git clone \
                  git@dashboard.geopulse:${{ github.repository_owner }}/${{ env.REPO_DASHBOARD }}.git \
                  ${{ github.workspace }}/dashboard

                pushd dashboard

                ${{ github.workspace }}/report.sh \
                  --state "pending" \
                  --description "GitHub Actions workflow requested" \
                  --token ${{ secrets.GP_GITHUB_TOKEN }} \
                  --repo ${{ env.REPO_DASHBOARD }} \
                  --commit $(git rev-parse HEAD)

                # Needed for building
                # Since we are not deploying this, we do not need real values.
                cp .env.example .env

                npm install
                npm run build

                pushd out
                fileName=${{ github.workspace }}/dashboard/dashboard
                tar -cf $fileName.tar *
                gzip -9 < $fileName.tar > $fileName.tar.gz
                popd

                popd

            - name: Create Release
              if: ${{ github.ref == 'refs/heads/master' }}
              uses: marvinpinto/action-automatic-releases@latest
              with:
                repo_token: "${{ secrets.GITHUB_TOKEN }}"
                automatic_release_tag: geopulse-${{ github.run_number }}-${{ github.run_attempt }}
                prerelease: false
                title: GeoPulse
                files: |
                    ${{ github.workspace }}/backend/config.json
                    ${{ github.workspace }}/backend/bin/auth
                    ${{ github.workspace }}/backend/bin/geo
                    ${{ github.workspace }}/backend/bin/mgmt
                    ${{ github.workspace }}/dashboard/dashboard.tar.gz

            - name: Write Dockerfile
              if: ${{ github.ref == 'refs/heads/master' }}
              run: |
                git clone git@ci.geopulse:${{ github.repository_owner }}/${{ env.REPO_CI }}.git \
                  ${{ github.workspace }}/ci -b deploy

                pushd ${{ github.workspace }}/ci

                DATE=$(date)

                COMPONENTS=("auth" "geo" "mgmt")
                for COMPONENT in "${COMPONENTS[@]}"; do
                echo "# Generated by GeoPulse CI on $DATE.
                # DO NOT EDIT.

                FROM ubuntu:latest

                # Install certificate authorities, not included in minimal image
                RUN apt-get update && apt-get install -y ca-certificates

                # Download required files
                ADD "${{ github.server_url }}/${{ github.repository }}/releases/latest/download/$COMPONENT" $COMPONENT
                RUN chmod +x $COMPONENT

                # Default configuration, published along with the binaries
                ADD "${{ github.server_url }}/${{ github.repository }}/releases/latest/download/config.json" config.json

                # Load development secrets
                RUN --mount=type=secret,id=config_local_json,dst=/etc/secrets/config.local.json \
                    cp /etc/secrets/config.local.json .

                ENTRYPOINT [\"./$COMPONENT\"]

                " > Dockerfile.$COMPONENT
                done

                echo "# Generated by GeoPulse CI on $DATE.
                # DO NOT EDIT.

                FROM traefik:latest

                # Load secrets
                RUN --mount=type=secret,id=traefik_yml,dst=/etc/secrets/traefik.yml \
                    cp /etc/secrets/traefik.yml .
                RUN mkdir config
                RUN --mount=type=secret,id=geopulse_yml,dst=/etc/secrets/geopulse.yml \
                    cp /etc/secrets/geopulse.yml ./config

                RUN --mount=type=secret,id=startup_sh,dst=/etc/secrets/startup.sh \
                    cp /etc/secrets/startup.sh . && chmod +x ./startup.sh

                # We need cURL
                RUN apk add curl

                ENTRYPOINT ./startup.sh; traefik --configFile=traefik.yml

                " > Dockerfile.proxy

                git add .

                git config user.name "GeoPulse CI"
                git config user.email "no-reply+ci@gp.trungnt2910.com"

                git commit -m "deploy: $DATE"
                git push

                popd

            - name: Mark Commit Success
              if: success()
              run: |
                pushd ${{ github.workspace }}/backend
                ${{ github.workspace }}/report.sh \
                  --state "success" \
                  --description "GitHub Actions workflow succeeded" \
                  --token ${{ secrets.GP_GITHUB_TOKEN }} \
                  --repo ${{ env.REPO_BACKEND }} \
                  --commit $(git rev-parse HEAD)
                popd

                pushd ${{ github.workspace }}/dashboard
                ${{ github.workspace }}/report.sh \
                  --state "success" \
                  --description "GitHub Actions workflow succeeded" \
                  --token ${{ secrets.GP_GITHUB_TOKEN }} \
                  --repo ${{ env.REPO_DASHBOARD }} \
                  --commit $(git rev-parse HEAD)
                popd

            - name: Mark Commit Failure
              if: failure()
              run: |
                if [ -d "${{ github.workspace }}/backend" ]; then
                  pushd ${{ github.workspace }}/backend
                  ${{ github.workspace }}/report.sh \
                    --state "failure" \
                    --description "GitHub Actions workflow failed" \
                    --token ${{ secrets.GP_GITHUB_TOKEN }} \
                    --repo ${{ env.REPO_BACKEND }} \
                    --commit $(git rev-parse HEAD)
                  popd
                fi

                if [ -d "${{ github.workspace }}/dashboard" ]; then
                  pushd ${{ github.workspace }}/dashboard
                  ${{ github.workspace }}/report.sh \
                    --state "failure" \
                    --description "GitHub Actions workflow failed" \
                    --token ${{ secrets.GP_GITHUB_TOKEN }} \
                    --repo ${{ env.REPO_DASHBOARD }} \
                    --commit $(git rev-parse HEAD)
                  popd
                fi
